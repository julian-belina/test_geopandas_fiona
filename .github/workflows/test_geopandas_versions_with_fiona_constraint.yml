on:
  push:

jobs:
  TestPushCondaForgeDev:
    name: Test conda-forge development version on ${{ matrix.runner_tag }} for geopandas=${{ matrix.geopandas_version }}
    strategy:
      fail-fast: false
      matrix:
        runner_tag: ["ubuntu-latest"]
        geopandas_version:
          [
            "0.1.1",
            "0.10.0",
            "0.10.1",
            "0.10.2",
            "0.11.0",
            "0.11.1",
            "0.12.0",
            "0.12.1",
            "0.12.2",
            "0.13.0",
            "0.13.1",
            "0.13.2",
            "0.14.0",
            "0.14.1",
            "0.14.2",
            "0.14.3",
            "0.14.4",
          ]
    uses: FZJ-IEK3-VSA/.github/.github/workflows/_run_single_conda_forge_test.yml@main
    with:
      runner_tag: ${{ matrix.runner_tag }}
      requirements_file_name: requirements_with_fiona_constraint.yml
      library_name: "geopandas"
      library_version: ${{ matrix.geopandas_version }}
      dependency_position_env_file: "0"

  # We decided not to test old dependency ranges on PyPI as there are many known incompatabilities
  # of indirect dependencies. There is no method known to us to automatically test, store share this information
  # TestPushPyPIDev:
  #   name: Test PyPi development version on ${{ matrix.runner_tag }} for numpy=${{ matrix.geopandas_version }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       runner_tag: ["self-hosted"]
  #       # rasterio: ["2.3","2.2","2.1","2.0","1.26","1.25","1.24","1.23","1.22"]
  #       rasterio: ["2.3","2.2"]
  #   uses: FZJ-IEK3-VSA/.github/.github/workflows/_run_single_pypi_test.yml@main
  #   with:
  #       runner_tag: ${{ matrix.runner_tag }}
  #       ipynb_example_folder: "examples"
  #       python_version: "3.13"
  #       optional_dependency_PyPI_tag: "[develop]"
  #       additional_conda_forge_dependencies: "glpk"
  #       library_name: "numpy"
  #       library_version: ${{ matrix.geopandas_version }}
